{"ast":null,"code":"/*\nCode almost perfect copy from the below StackOverflow answer:\nhttps://stackoverflow.com/a/31061352\n*/\nimport { publicEncrypt, privateDecrypt } from \"crypto\";\nimport { resolve } from \"path\";\nimport { readFileSync } from \"fs\";\nexport default function Crypto(toDo, content) {\n  toDo === 'encrypt' ? encryptStringWithRsaPublicKey(content) : decryptStringWithRsaPrivateKey(content);\n\n  const encryptStringWithRsaPublicKey = toEncrypt => {\n    var absolutePath = resolve('../custom.pub');\n    var publicKey = readFileSync(absolutePath, \"utf8\");\n    var buffer = Buffer.from(toEncrypt);\n    var encrypted = publicEncrypt(publicKey, buffer);\n    return encrypted.toString(\"base64\");\n  };\n\n  const decryptStringWithRsaPrivateKey = toDecrypt => {\n    var absolutePath = resolve('../custom');\n    var privateKey = readFileSync(absolutePath, \"utf8\");\n    var buffer = Buffer.from(toDecrypt, \"base64\");\n    var decrypted = privateDecrypt(privateKey, buffer);\n    return decrypted.toString(\"utf8\");\n  };\n}\n_c = Crypto;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crypto\");","map":{"version":3,"sources":["/home/ubuntu/dev/src/crypto.js"],"names":["publicEncrypt","privateDecrypt","resolve","readFileSync","Crypto","toDo","content","encryptStringWithRsaPublicKey","decryptStringWithRsaPrivateKey","toEncrypt","absolutePath","publicKey","buffer","Buffer","from","encrypted","toString","toDecrypt","privateKey","decrypted"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,QAA9C;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,YAAT,QAA6B,IAA7B;AAEA,eAAe,SAASC,MAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AAE5CD,EAAAA,IAAI,KAAK,SAAT,GACIE,6BAA6B,CAAED,OAAF,CADjC,GAEIE,8BAA8B,CAAEF,OAAF,CAFlC;;AAIA,QAAMC,6BAA6B,GAAKE,SAAF,IAAiB;AACnD,QAAIC,YAAY,GAAGR,OAAO,CAAE,eAAF,CAA1B;AACA,QAAIS,SAAS,GAAGR,YAAY,CAAEO,YAAF,EAAgB,MAAhB,CAA5B;AACA,QAAIE,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAaL,SAAb,CAAb;AACA,QAAIM,SAAS,GAAGf,aAAa,CAAEW,SAAF,EAAaC,MAAb,CAA7B;AACA,WAAOG,SAAS,CAACC,QAAV,CAAoB,QAApB,CAAP;AACH,GAND;;AAQA,QAAMR,8BAA8B,GAAKS,SAAF,IAAiB;AACpD,QAAIP,YAAY,GAAGR,OAAO,CAAE,WAAF,CAA1B;AACA,QAAIgB,UAAU,GAAGf,YAAY,CAAEO,YAAF,EAAgB,MAAhB,CAA7B;AACA,QAAIE,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAaG,SAAb,EAAwB,QAAxB,CAAb;AACA,QAAIE,SAAS,GAAGlB,cAAc,CAAEiB,UAAF,EAAcN,MAAd,CAA9B;AACA,WAAOO,SAAS,CAACH,QAAV,CAAoB,MAApB,CAAP;AACH,GAND;AAOH;KArBuBZ,M","sourcesContent":["/*\nCode almost perfect copy from the below StackOverflow answer:\nhttps://stackoverflow.com/a/31061352\n*/\n\nimport { publicEncrypt, privateDecrypt } from \"crypto\";\nimport { resolve } from \"path\";\nimport { readFileSync } from \"fs\";\n\nexport default function Crypto ( toDo, content ){\n\n    toDo === 'encrypt' ?\n        encryptStringWithRsaPublicKey( content ) :\n        decryptStringWithRsaPrivateKey( content )\n\n    const encryptStringWithRsaPublicKey = ( toEncrypt ) => {\n        var absolutePath = resolve( '../custom.pub' )\n        var publicKey = readFileSync( absolutePath, \"utf8\" )\n        var buffer = Buffer.from( toEncrypt )\n        var encrypted = publicEncrypt( publicKey, buffer )\n        return encrypted.toString( \"base64\" )\n    }\n\n    const decryptStringWithRsaPrivateKey = ( toDecrypt ) => {\n        var absolutePath = resolve( '../custom' )\n        var privateKey = readFileSync( absolutePath, \"utf8\" )\n        var buffer = Buffer.from( toDecrypt, \"base64\" )\n        var decrypted = privateDecrypt( privateKey, buffer )\n        return decrypted.toString( \"utf8\" )\n    }\n}"]},"metadata":{},"sourceType":"module"}